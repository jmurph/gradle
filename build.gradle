import java.text.SimpleDateFormat
import java.util.jar.Attributes
import org.gradle.api.artifacts.repositories.WebdavResolver

import org.gradle.build.samples.WrapperProjectCreator
import org.apache.ivy.plugins.resolver.*

/**
 * For building Gradle you usually don't need to specify any properties. Only certain functionality of the Gradle requires
 * setting certain properties. Those properties can be set in the gradle.properties file in the the gradle user home. The
 * following properties can be set:
 *
 * Uploading distributions to Gradle's release and snapshot repository at codehaus: codehausUserName, codehausUserPassword
 * Uploading the userguide and the javadoc to Gradle's website: websiteFtpUserName, websiteFtpUserPassword
 * Using the build to create a new distribution and install it on the local machine: gradle_installPath
 */

version = new Version(project)

defaultTasks "clean", "assemble"

usePlugin 'base'

startScriptsDir = new File("$buildDir/startScripts")

archivesBaseName = 'gradle'

libraries = [
        ant             : 'org.apache.ant:ant:1.7.0@jar',
        ant_junit       : 'org.apache.ant:ant-junit:1.7.0@jar',
        ant_launcher    : 'org.apache.ant:ant-launcher:1.7.0@jar',
        antlr           : 'antlr:antlr:2.7.7@jar',
        asm_all         : 'asm:asm-all:2.2.3@jar',
        commons_cli     : 'commons-cli:commons-cli:1.2@jar',
        commons_io      : 'commons-io:commons-io:1.4@jar',
        dom4j           : 'dom4j:dom4j:1.6.1@jar',
        groovy          : 'org.codehaus.groovy:groovy:1.6.4@jar',
        jaxen           : 'jaxen:jaxen:1.1@jar',
        jopt_simple     : 'net.sf.jopt-simple:jopt-simple:2.4.1@jar',
        jul_to_slf4j    : 'org.slf4j:jul-to-slf4j:1.5.8@jar',
        logback_classic : 'ch.qos.logback:logback-classic:0.9.17@jar',
        logback_core    : 'ch.qos.logback:logback-core:0.9.17@jar',
        slf4j_api       : 'org.slf4j:slf4j-api:1.5.8@jar',
        junit           : 'junit:junit:4.7'
    ]

libraries.groovy_depends  = [libraries.groovy, libraries.ant, libraries.ant_launcher, libraries.asm_all,
        libraries.antlr, libraries.commons_cli, libraries.ant_junit, libraries.junit]

allprojects {
    group = 'org.gradle'

    plugins.withType(JavaPlugin).whenPluginAdded {
        sourceCompatibility = 1.5
        targetCompatibility = 1.5
    }

    repositories {
        mavenCentral()
        add(new URLResolver()) {
            name = 'sf_gradleRepo'
            addArtifactPattern('http://gradle.sourceforge.net/gradleRepo/[organisation]/[module](/[branch])/[type]s/[artifact]-[revision](-[classifier])(.[ext])')
        }
    }

    version = this.version
}

def FIRST_LEVEL_JMOCK = ['org.hamcrest:hamcrest-core:1.1@jar', 'org.hamcrest:hamcrest-library:1.1@jar', 'org.jmock:jmock-junit4:2.5.1@jar']

configure(groovyProjects()) {
    usePlugin 'groovy'
    usePlugin 'code-quality'

    archivesBaseName = "gradle-${name.replaceAll("\\p{Upper}") { "-${it.toLowerCase()}" } }"
    dependencies {
        testCompile libraries.junit, FIRST_LEVEL_JMOCK
        testCompile module("org.jmock:jmock:2.5.1") {
            dependencies('org.jmock:jmock-legacy:2.5.1@jar', 'org.objenesis:objenesis:1.0', 'cglib:cglib-nodep:2.1_3')
            dependencies(FIRST_LEVEL_JMOCK as Object[])
        }
        // todo - these should not be here
        testCompile 'org.jmock:jmock-legacy:2.5.1@jar', 'org.objenesis:objenesis:1.0', 'cglib:cglib-nodep:2.1_3'
    }

    checkstyleConfigDir = "$rootDir/config/checkstyle"
    checkstyleConfigFileName = new File(checkstyleConfigDir, "checkstyle.xml")
    codeNarcConfigFileName = "$rootDir/config/codenarc.xml"
    checkstyleProperties.checkstyleConfigDir = checkstyleConfigDir

    sourceSets.allObjects { sourceSet ->
        task "${sourceSet.getCompileTaskName('groovy').replaceAll('compile', 'checkstyle')}"(type: Checkstyle) {
            configFile = new File(checkstyleConfigDir, "checkstyle-groovy.xml")
            source sourceSet.allGroovy
            classpath = sourceSet.compileClasspath
            resultFile = new File(checkstyleResultsDir, "${sourceSet.name}.xml")
        }
    }
}

allprojects {
    def config = configurations.findByName('testRuntime')
    if (!config) {
        return
    }
    task ide(type: Sync) {
        into file('lib')
        from { config.copyRecursive(DependencySpecs.type(Type.EXTERNAL)).files }
    }
}

configurations {
    dists
    runtime {
        visible = false
    }
    testRuntime {
        extendsFrom runtime
    }
}

dependencies {
    groovyProjects().each {
        runtime project(path: it.path)
    }
}

evaluationDependsOn(':docs')

clean.dependsOn subprojects.collect { "$it.path:clean" }

task check(overwrite: true, dependsOn: groovyProjects()*.check)
task test(overwrite: true, dependsOn: groovyProjects()*.test)

gradle.taskGraph.whenReady {graph ->
    configure(groovyProjects()) {
      jar.manifest.mainAttributes([
              (Attributes.Name.IMPLEMENTATION_TITLE.toString()): 'Gradle',
              (Attributes.Name.IMPLEMENTATION_VERSION.toString()): version.toString(),
      ])
    }
}

zipRootFolder = "$archivesBaseName-${-> version}"

binDistImage = copySpec {
    from 'src/toplevel'
    from project(':docs').distDocs.destFile
    into('bin') {
        from startScriptsDir
        fileMode = 0755
    }
    into('lib') {
        from configurations.runtime
    }
}

allDistImage = copySpec {
    from binDistImage
    into('src') {
        from groovyProjects().collect {project -> project.sourceSets.main.allSource }
    }
    into('docs') {
        from project(':docs').docsDir
    }
    into('samples') {
        from project(':docs').samplesDir
    }
}

task allZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:docs', 'docs:samples']) {
    classifier = 'all'
    into(zipRootFolder) {
        from allDistImage
    }
}

task binZip(type: Zip, dependsOn: ['launcher:startScripts', 'docs:distDocs']) {
    classifier = 'bin'
    into(zipRootFolder) {
        from binDistImage
    }
}

task srcZip(type: Zip) {
    classifier = 'src'
    into(zipRootFolder) {
        from('gradlew') {
            fileMode = 0755
        }
        from(projectDir) {
            def spec = delegate
            ['buildSrc', 'subprojects/*'].each {
                spec.include "$it/*.gradle"
                spec.include "$it/src/"
            }
            include 'config/'
            include 'src/'
            include '*.gradle'
            include 'gradle.properties'
            include 'wrapper/'
            include 'gradlew.bat'
        }
    }
}

artifacts {
    tasks.withType(Zip).each {
        dists it
    }
}

task intTestImage(type: Sync) {
    dependsOn allZip.taskDependencies
    from allDistImage
    integTestGradleHome = file("$buildDir/integ test")
    into integTestGradleHome
    doLast { task ->
        ant.chmod(dir: "$integTestGradleHome/bin", perm: "ugo+rx", includes: "**/*")
        WrapperProjectCreator.createProject(new File(integTestGradleHome, 'samples'), binZip.archivePath.parentFile, version.toString())
    }
}

task integTest(type: AntTest, dependsOn: [intTestImage, binZip, allZip, srcZip, ':docs:userguideDocbook']) {
    integTestUserDir = file('intTestHomeDir')
    options.systemProperties['integTest.srcDir'] = file('src').absolutePath
    options.systemProperties['integTest.userGuideInfoDir'] = project(':docs').docbookSrc
    options.systemProperties['integTest.userGuideOutputDir'] = new File(project(':docs').samplesSrcDir, "userguideOutput").absolutePath
    options.systemProperties['integTest.gradleUserHomeDir'] = integTestUserDir.absolutePath
    include 'org/gradle/integtests/**/*IntegrationTest.*'

    testClassesDir = project(':core').sourceSets.test.classesDir
    classpath = project(':core').sourceSets.test.runtimeClasspath + configurations.testRuntime
    testResultsDir = file('build/test-results')
    testReportDir = file('build/reports/tests')
    testSrcDirs = []
    doFirst {task ->
        if (isDevBuild()) {
            task.exclude 'org/gradle/integtests/DistributionIntegrationTest.*'
        }
        task.options.systemProperties['integTest.gradleHomeDir'] = intTestImage.integTestGradleHome.absolutePath
        def forkArgs
        if (noForkIntegTests()) {
            task.options.systemProperties['org.gradle.integtest.nofork'] = "true"
            forkArgs = [forkMode: ForkMode.ONCE, jvmArgs: ['-ea', '-Xmx512m', '-XX:MaxPermSize=256m', '-XX:+HeapDumpOnOutOfMemoryError']]
        } else {
            forkArgs = [forkMode: ForkMode.ONCE, jvmArgs: ['-ea', '-Xmx512m', '-XX:+HeapDumpOnOutOfMemoryError']]
        }
        task.options.fork(forkArgs)
    }
}

boolean noForkIntegTests() {
    if (project.hasProperty('forkIntegTests')) {
        return !Boolean.valueOf(forkIntegTests)
    }
    return isDevBuild()
}

private def isDevBuild() {
    gradle.taskGraph.hasTask(':developerBuild')
}

task testedDists(dependsOn: [assemble, check, integTest])

task nightlyBuild(dependsOn: [clean, testedDists, ':docs:uploadDocs'])

task install(type: Install, description: 'Installs the minimal distribution into directory $gradle_installPath') {
    dependsOn binZip.taskDependencies
    from binDistImage
    installDirProperyName = 'gradle_installPath'
}

task installAll(type: Install, description: 'Installs the full distribution into directory $gradle_installPath') {
    dependsOn allZip.taskDependencies
    from allDistImage
    installDirProperyName = 'gradle_installPath'
}

uploadDists {
    dependsOn testedDists
    uploadDescriptor = false
    doFirst {
        it.repositories.add(new WebdavResolver()) {
            name = 'gradleReleases'
            user = codehausUserName
            userPassword = codehausUserPassword
            addArtifactPattern("${version.distributionUrl}/[artifact]-[revision](-[classifier]).[ext]" as String)
        }
    }
}

gradle.taskGraph.whenReady {graph ->
    if (graph.hasTask(uploadDists)) {
        // check properties defined and fail early
        codehausUserName
        codehausUserPassword
    }
}

task developerBuild(dependsOn: [clean, testedDists])
task ciBuild(dependsOn: [clean, testedDists])

task release(dependsOn: [uploadDists, ':docs:uploadDocs']) << {
    // Update the version properties in gradle.properties
    Properties props = new Properties()
    File propsFile = file('gradle.properties')
    propsFile.withReader { props.load(it) }
    props.previousVersion = props.nextVersion
    def nextVersion = props.nextVersion.split('\\.')
    nextVersion[1] = (nextVersion[1] as Integer) +1
    props.nextVersion = nextVersion.join('.')
    propsFile.withWriter { props.store(it, 'properties') }
// todo rewrite release functionality for Git. Until then we have to do tagging and branching manually.
//    svn.release()
}

task wrapper(type: Wrapper, dependsOn: binZip)
wrapper.doFirst {task ->
    task.configure {
        gradleVersion = version
        jarPath = 'wrapper'
    }
}

task rebuildWrapper(dependsOn: [clean, wrapper])

def groovyProjects() {
    subprojects.findAll { project -> project.name != 'docs' }
}

class Version {
    String versionNumber
    Date buildTime
    Boolean release = null

    def Version(project) {
        this.versionNumber = project.nextVersion
        File timestampFile = new File(project.buildDir, 'timestamp.txt')
        if (!timestampFile.isFile()) {
            timestampFile.parentFile.mkdirs()
            timestampFile.createNewFile()
        } else {
            boolean uptodate = true
            def modified = timestampFile.lastModified()
            project.project(':core').fileTree('src/main').visit {fte ->
                if (fte.file.isFile() && fte.lastModified > modified) {
                    uptodate = false
                    fte.stopVisiting()
                }
            }
            if (!uptodate) {
                timestampFile.setLastModified(new Date().time)
            }
        }
        buildTime = new Date(timestampFile.lastModified())

        project.gradle.taskGraph.whenReady {graph ->
            if (!graph.hasTask(':release')) {
                this.versionNumber += "-" + getTimestamp()
                release = false
            } else {
                release = true
            }
        }
    }

    String toString() {
        versionNumber
    }

    String getTimestamp() {
        new SimpleDateFormat('yyyyMMddHHmmssZ').format(buildTime)
    }

    boolean isRelease() {
        if (release == null) {
            throw new GradleException("Can't determine whether this is a release build before the task graph is populated")
        }
        return release
    }

    String getDistributionUrl() {
        if (release) {
            'https://dav.codehaus.org/dist/gradle'
        } else {
            'https://dav.codehaus.org/snapshots.dist/gradle'
        }
    }
}

class Install extends Sync {

    String installDirProperyName
    File installDir

    def Install() {
        addPropertyCheck()
        doLast {
            ant.chmod(file: "$installDir/bin/gradle", perm: 'ugo+x')
        }
    }

    private void addPropertyCheck() {
        project.gradle.taskGraph.whenReady {graph ->
            if (graph.hasTask(path)) {
                // Do this early to ensure that the properties we need have been set, and fail early
                if (!project.hasProperty(installDirProperyName)) {
                    throw new RuntimeException("You can't install without setting the $installDirProperyName property.")
                }
                installDir = project.file(this.project."$installDirProperyName")
                if (installDir.file) {
                    throw new RuntimeException("Install directory $installDir does not look like a Gradle installation. Cannot delete it to install.")
                }
                if (installDir.directory) {
                    File libDir = new File(installDir, "lib")
                    if (!libDir.directory || !libDir.list().findAll { it.matches('gradle.*\\.jar')}) {
                        throw new RuntimeException("Install directory $installDir does not look like a Gradle installation. Cannot delete it to install.")
                    }
                }
                into installDir
            }
        }
    }
}
